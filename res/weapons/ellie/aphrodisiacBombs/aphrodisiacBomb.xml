<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<weapon>
	<coreAttributes>
		
		<!-- How attribution to the mod author (you!) should be displayed in the weapon's tooltip. If left blank or not included, a default attribution based on folder name will be used. (I have commented out this example, as I don't want items created by myself to have author attribution.)-->
		<!-- <authorTag><![CDATA[A discreet inscription at the base of the dagger's blade informs you that it was made by 'Innoxia'.]]></authorTag> -->
		
		<!-- How much this weapon is worth. -->
		<value>250</value>
		
		<!-- Use "true" if this is a melee weapon, and "false" if it's ranged. (Without quotation marks.) -->
		<melee>false</melee>
		
		<!-- Use "true" if this weapon is two-handed, and thus cannot be simultaneously wielded with an offhand weapon, and "false" if it's one-handed. (Without quotation marks.) -->
		<twoHanded>false</twoHanded>
		
		<!-- Use "true" if this weapon is considered to be a one-shot weapon, which is mainly used for thrown weapons, but could of course be used for any weapon type (melee or ranged) which gets used up after a single attack.
			This defaults to "false" if this element is omitted.
			One-shot weapons are lost after using them to attack, but if the attacker has more than one of them, then the attacker can continue to use this weapon type to attack until they have no more of them in their inventory. -->
		<oneShotWeapon>true</oneShotWeapon>
		
		<!-- If the 'oneShotWeapon' element above is set to true, then this element is used to determine the chance for this weapon to be recovered after being used at the end of each combat turn.
			Values are in the range of 0->100, representing 0% to 100% chance to recover.
			Default is 0 if omitted. -->
		<oneShotWeaponChanceToRecoverAfterTurn>0</oneShotWeaponChanceToRecoverAfterTurn>
		
		<!-- Exactly the same as 'oneShotWeaponChanceToRecoverAfterTurn' above, except this chance triggers once at the end of combat instead of at the end of each turn during combat. -->
		<oneShotWeaponChanceToRecoverAfterCombat>0</oneShotWeaponChanceToRecoverAfterCombat>
		
		<!-- What's appended before the weapon's name in an instance of "Innoxia was holding X Demon's Dagger", where X is the determiner. This will usually be either "a" or "an", but for other weapons may be different.
		An example might be: "Innoxia was holding X scissors", where X (the determiner) would now need to be "a pair of". -->
		<determiner><![CDATA[an]]></determiner>
		
		<!-- The name of this weapon. -->
		<name appendDamageName="true"><![CDATA[Aphrodisiac Bomb]]></name> <!-- You can leave out the 'appendDamageName' attribute, but if you never want this weapon to be described by its damage type, then set it as false. (i.e. If set to false, this dagger would always be called 'Demon's Dagger' instead of, for example, 'Forceful Demon's Dagger')-->
		
		<!-- The plural name of this weapon. If pluralByDefault's "false" is changed to "true", then the game will always the plural name when referring to this weapon. -->
		<namePlural pluralByDefault="false"><![CDATA[Demon's Daggers]]></namePlural> 
		
		<!-- The description/lore of this weapon. -->
		<description><![CDATA[A vial of viscous pink liquid which quickly dissolves into aphrodisiac gases when released. Widely used both in combat as a way to subdue opponents without needing to resort to violence. Be careful not to breathe the fumes!]]></description>
		
		<!-- How the weapon is used.
			This should be a single verb, as it is used for the title of attacking actions in combat. -->
		<attackDescriptor>throw</attackDescriptor>
		
		<!-- A description of how the weapon is to be used in the sentence: "X your enemy for N damage!"
			For this dagger, 'stab' fits well enough, but for example a javelin would need more than just 'throw', as otherwise you'd end up with "Throw your enemy for N damage!"
			Continuing with the javelin example, you'd probably want to define this element as something like 'throw [npc.her] javelin at' to make "Throw your javelin at your enemy for N damage!"
			You should use the parsing target of 'npc' for the character using this weapon, and if needed, you can also use 'npc2' for the targeted character.
			If this element is omitted, then the value defined in the 'attackDescriptor' element above will be used.
			This element is used to display the predicted attacks to the player in combat, and as such should be kept as brief as possible. -->
		<attackDescriptionPrefix>throw [npc.her] aphrodisiac bomb at</attackDescriptionPrefix>
		
		<!-- The description that's displayed when hovering over the attack action in combat. Follow the same guidelines as equipText (a couple of entries further down this page).
		As this tooltip is only ever seen from the player's perspective, you can always write in the first-person narrative. (Still use npc2 for the target, though.)-->
		<attackTooltipDescription><![CDATA[Throw your aphrodisiac bomb at [npc2.name].]]></attackTooltipDescription>
		
		<!-- The rarity of this weapon.
			You should likely leave this as COMMON, as the game automatically varies the rarity of COMMON items based on their enchantments and whether or not they're part of a set.
			If you define a rarity other than COMMON, then your defined rarity will always be the same for this weapon no matter what enchantments it has.
			Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/inventory/Rarity.java -->
		<rarity>COMMON</rarity>
		
		<!-- What set this weapon is a part of. Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/inventory/clothing/ClothingSet.java -->
		<weaponSet/> 
		
		<!-- The description that's used when equipping this weapon. The description should be generic, able to be used by both the player and NPCs. Just make sure to use the tag "[npc.verb()]" whenever using a verb, which will then, for example, parse like this:
		[npc.verb(run)] if npc is player = "run"
		[npc.verb(run)] if npc is not the player = "runs"
		Always use the first-person singular verb.
		The target "npc" OR "npc1" should be used for the character using the weapon. e.g. If the player is the one attacking (and is called Innoxia), then [npc.Name] will return "Innoxia"
		The target "npc2" should be used for the character being attacked. e.g. If Brax is the one being attacked, then [npc2.Name] will return "Brax"
		-->
		<equipText><![CDATA[[npc.Name] [npc.verb(grasp)] the bomb, ready to throw it.]]></equipText>
		
		<!-- The description that's used when equipping this weapon. Follow the same guidelines as equipText. -->
		<unequipText><![CDATA[[npc.Name] [npc.verb(stow)] the bomb back into your bag.]]></unequipText>
		
		<!-- The file name of this weapon's image when in the character's inventory. The only supported file type is .svg. I use the free program "Inkscape" to make .svg images for the game. -->
		<imageName>aphrodisiacBomb.svg</imageName>
		
		<!-- The file name of this weapon's image when equipped. Can be (and usually is) the same as the imageName (which in this example would be "dagger_sheathed.svg"). -->
		<imageEquippedName>aphrodisiacBomb.svg</imageEquippedName>
		
		<!-- How much natural physical resistance this weapon provides when equipped. Should only really be above 0 for shields or other such protective weapons. -->
		<physicalResistance>0</physicalResistance> 
		
		<!-- The base damage that this weapon deals. -->
		<damage>200</damage>
		<aoe chance="50">100</aoe>
		<!-- If you want to define additional AoE damages, use this format (an example of it in use can be found in 'res/weapons/innoxia/lightningGlobe/lightning_globe.xml'):
		<aoe chance="50">10</aoe> 50% chance of hitting an additional enemy (who has not been hit yet) for 10 damage
		<aoe chance="25">5</aoe> 25% chance of hitting an additional enemy (who has not been hit yet) for 5 damage
		-->
		
		<!-- How many arcane essences are required, and drained, by firing this weapon. Ranged weapons should usually use the value 1, while melee weapons should usually be 0. -->
		<arcaneCost>0</arcaneCost> 
		
		<!-- The variance in base damage when this weapon is actually used to attack. Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/combat/DamageVariance.java -->
		<damageVariance>HIGH</damageVariance>
		
		<!-- The available damage types that this weapon can spawn in with. Values can be found here (MISC should not be used): https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/combat/DamageType.java -->
		<availableDamageTypes>
			<damageType>LUST</damageType>
		</availableDamageTypes>
		
		<!-- The spells that are unlocked when equipping this weapon. IF you want to add any, use the format:
		<spells changeOnReforge="true">
			<spell damageType="FIRE">FIREBALL</spell>
			<spell damageType="ICE">ICE_SHARD</spell>
			<spell damageType="LUST">ARCANE_AROUSAL</spell>
			<spell damageType="PHYSICAL">SLAM</spell>
			<spell damageType="POISON">POISON_VAPOURS</spell>
		</spells>
		
		The 'changeOnReforge' variable determines whether this weapon should regenerate spells whenever the player changes the damage type. (i.e. If they reforge a FIRE dagger to an ICE dagger, if 'changeOnReforge' is true, then the granted spell FIREBALL will automatically switch to ICE_SHARD).
		
		The 'damageType' variable corresponds to the damageType which causes the spell to be unlocked when this weapon is spawned in. You can have multiple entries of the same damageType, like so:
		...
			<spell damageType="FIRE">FIREBALL</spell>
			<spell damageType="FIRE">FLASH</spell>
			<spell damageType="FIRE">ICE_SHARD</spell>
			<spell damageType="FIRE">STEAL</spell>
		...
		Note that the damageType does not have to correspond to the spell's school (so FIRE can unlock ICE_SHARD, etc.).
		
		Values for spells can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/combat/Spell.java -->
		<spells/>
		
		<!-- The combat moves that are unlocked when equipping this weapon. IF you want to add any, use the format:
		<combatMoves changeOnReforge="true">
			<move damageType="PHYSICAL">ASSAULT_RIFLE_MAG_DUMP</move>
		</combatMoves>
		
		The 'changeOnReforge' variable determines whether this weapon should regenerate combat moves whenever the player changes the damage type. (i.e. If they reforge a PHYSICAL dagger to an ICE dagger, if 'changeOnReforge' is true, then the granted combat move ASSAULT_RIFLE_MAG_DUMP will be lost).
		
		The 'damageType' variable corresponds to the damageType which causes the move to be unlocked when this weapon is spawned in. You can have multiple entries of the same damageType, like so:
		...
			<move damageType="FIRE">EXAMPLE_MOVE_1</move>
			<move damageType="FIRE">EXAMPLE_MOVE_2</move>
			<move damageType="FIRE">EXAMPLE_MOVE_3</move>
			<move damageType="FIRE">EXAMPLE_MOVE_4</move>
		...
		
		Values for combat moves can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/combat/CMWeaponSpecials.java
		There will be a way to add modded combat moves soon! -->
		<combatMoves/>
		
		<!-- How many effects this weapon can be enchanted with. Should usually be left at 5. -->
		<enchantmentLimit>5</enchantmentLimit>
		
		<!-- The effects that this weapon spawns in with. Remember that the player can remove/change/add effects. To know what to put in here, it would probably be easiest to enchant a weapon in your game, save the game, then copy over that weapon's 'effects' in your save file.
		There are two special values for secondaryModifier, which are: RESISTANCE_WEAPON and DAMAGE_WEAPON
		RESISTANCE_WEAPON applies the related resistance of this weapon's damage type, while DAMAGE_WEAPON applies the related damage type.
		For example, if this dagger spawned in as type POISON, and I'd replaced both instances of CRITICAL_CHANCE with DAMAGE_WEAPON, then this dagger would spawn with two +5 Poison Damage effects.-->
		<effects> 
<!--				<effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="CRITICAL_CHANCE" timer="0"/>-->
<!--				<effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="CRITICAL_CHANCE" timer="0"/>-->
				<!-- The secondary TFModifier 'ENCHANTMENT_LIMIT' is not available as an enchantment to the player in-game (for balance reasons), but can be defined as below to give enchantment capacity boosts to modded weapons: -->
				<!-- <effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_MAJOR_ATTRIBUTE" secondaryModifier="ENCHANTMENT_LIMIT" timer="0"/> -->
		</effects>
		
		<!-- You can use this section to describe any extra features of this weapon.
		These effects are shown in the tooltip when the player hovers over the weapon icon, so try and keep them short (as they should fit on one line).
		It should probably only be used to describe what happens in the <onHitEffect> element.
		No characters are passed in as parsing arguments, so you should NOT use any character-specific parsing elements (such as [npc.name]).
		For this weapon, no extra effects need to be described, but if you need to use this section, use the following format:
		<extraEffects>
			<effect><![CDATA[Stab time!]]></effect>
		</extraEffects> -->
		<extraEffects/>
		
		<!-- This is applied every time this weapon hits a target. It does NOT apply when the weapon critically hits.
		The returned text is appended to the hit description.
		'npc' corresponds to the attacker, and 'npc2' to the target, for use in effects/parsing.
		For this weapon, no hit effects need to be added, but if you need to use this section, use the following format:
		<onHitEffect><![CDATA[
		[##npc2.setHealth(0)]
		[npc2.Name] is instantly defeated!
		]]></onHitEffect> -->
		<onHitEffect/>
	
		<!-- This is applied every time this weapon critically hits a target. It does NOT apply when the weapon does a non-critical hit.
		The returned text is appended to the hit description.
		'npc' corresponds to the attacker, and 'npc2' to the target, for use in effects/parsing.
		Use the exact same format as onHitEffect (the element above). -->
		<onCriticalHitEffect/>
		
		<!-- Your weapon can be coloured any way you like, but if you'd like the player to be able to dye your weapon, you can specify available colours here. primaryColours and secondaryColours all spawn in as a default colour, while their 'Dye' counterparts are only available if the player chooses to dye the weapon in that colour. The game detects specific colour values, and recolours them to the value chosen by the player. These values are as follows:
		Red is used as base colour for changing the DAMAGE TYPE's colour of the graphic in-game, and the game will only recognise and change the following colours:
			#ff2a2a
			#ff5555
			#ff8080
			#ffaaaa
			#ffd5d5
		Orange is used as base colour for changing the PRIMARY colour of the graphic in-game, and the game will only recognise and change the following colours:
			#ff7f2a
			#ff9955
			#ffb380
			#ffccaa
			#ffe6d5
		Yellow is used as base colour for changing the SECONDARY colour of the graphic in-game, and the game will only recognise and change the following colours:
			#ffd42a
			#ffdd55
			#ffe680
			#ffeeaa
			#fff6d5
		Green is used as base colour for changing the TERTIARY colour of the graphic in-game, and the game will only recognise and change the following colours:
			#abc837
			#bcd35f
			#cdde87
			#dde9af
			#eef4d7
		As you can see above, weapons differ from weapon in that their 'Red' colour is recoloured based on the weapon's damage type! The "primaryColours", "secondaryColours", and "tertiaryColours" defined below are for recolouring the Orange, Yellow, and Green values, respectively.
			
		ANY GRADIENTS THAT YOU USE SHOULD BE CALLED: "innoGrad1", "innoGrad2", etc.
		You can see a visual representation of these colours (as used in clothing) here: https://www.lilithsthrone.com/wiki/doku.php?id=modding_wiki:modding:creating_clothes
		Colour lists to be used can be found here: https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours/ColourListPresets.java -->
		<primaryColours recolouringAllowed="false" values="JUST_PINK"/> <!-- You can leave the attribute 'recolouringallowed' out of colour definitions. If you want the player to be unable to change this colour, then set it as false. This is only used in very niche situations (such as for the filly choker).-->
		<primaryColoursDye/>
		<secondaryColours/>
		<secondaryColoursDye/>
		
		<!-- You can define any number of custom colours to replace the shades you've coloured your svg with.
		If you have used the primary/secondary/tertiary elements up above, then do not use their associated colour hexes.
		(i.e. If you've defined a primaryColours element, do not use #ff7f2a, #ff9955, #ffb380, #ffccaa, or #ffe6d5 in the customColour attributes.)
		
		You should NEVER use the primary recolouring shades, as they are always reserved for the damage type's colour:
		#ff2a2a, #ff5555, #ff8080, #ffaaaa, or #ffd5d5
		-->
		<customColours>
			<!-- The 'copyColourIndex' attribute defines which colour index should be copied into this colour slot on weapon generation. This particular colour, having an index of 0, will always be coloured the same as the primary colour when generated. Indexes go from 0->X, where X is the number of defined colours. i.e. If you only define primary and secondary, the first custom colour (i.e. this one) will have an index of 2. -->
<!--			<customColour copyColourIndex="0" c0="#6C5D53" c1="#917C6F" c2="#AC9D93" c3="#C8BEB7" c4="#E3DEDB">-->
<!--				<defaultColours>-->
<!--					<colour>CLOTHING_STEEL</colour>-->
<!--				</defaultColours> -->
<!--				<extraColours values="ALL_METAL"/>-->
<!--			</customColour>-->
			 <!-- This particular copyColourIndex, having an index of 1, will always be coloured the same as the secondary colour when generated -->
<!--			<customColour copyColourIndex="1" recolouringAllowed="true" c0="#6C5353" c1="#916F6F" c2="#AC9393" c3="#C8B7B7" c4="#E3DBDB"> &lt;!&ndash; These are the colours which you've used in your svg and would like replaced with the colours you define below. c0 is the darkest shade. Shades can go up to any number, but setting just 5 shades should work best. &ndash;&gt;-->
<!--				<defaultColours>-->
<!--					<colour>CLOTHING_BLACK</colour> &lt;!&ndash; The colours which this weapon should spawn in with. &ndash;&gt;-->
<!--				</defaultColours> -->
<!--				<extraColours values="ALL"/> &lt;!&ndash; The colours which this weapon can be dyed to. &ndash;&gt;-->
<!--			</customColour>-->
		</customColours>
		
		<!-- Special item tags that apply to this weapon. Values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/inventory/ItemTag.java -->
		<itemTags> 
			<tag>SOLD_BY_RALPH</tag>
			<tag>SOLD_BY_FINCH</tag>
			<tag>DOMINION_ALLEYWAY_SPAWN</tag>
		</itemTags>
		
	</coreAttributes>

	<!-- Descriptions that are used when hitting an enemy.
		One of the hitText values will be randomly selected each time the attacker hits their target.
		Follow the same guidelines as equipText.
		You can use 'npc' as the parsing target for the person who's attacking, and 'npc2' as the parsing target for the person being hit. -->
	<hitDescriptions>
		<hitText><![CDATA[
		[npc.name] [npc.verb(toss)] [npc.her] Aphrodisiac Bomb towards [npc2.name], the glass shattering as it lands at [npc2.her] feet, releasing a cloud of sweet-smelling vapours!
		]]></hitText>
		<hitText><![CDATA[
		[npc.name] [npc.verb(throw)] [npc.her] Aphrodisiac Bomb towards [npc2.name], the glass shattering as it lands at [npc2.her] feet, releasing a cloud of sweet-smelling vapours!
		]]></hitText>
		<!-- You can add hit descriptions which will only be shown on a critical hit by using the 'criticalHitText' element.
			This is optional, and you don't need to define any critical hit descriptions (in which case just a regular 'hitText' will be used instead.)-->
		<criticalHitText><![CDATA[
		[npc.name] carefully [npc.verb(take)] aim before hurling the Aphrodisiac Bomb towards [npc.name]. The bomb hits [npc2.her] square in the chest and [npc2.she] is engulfed in a cloud of sweet vapours as the aphrodisiac starts to soak into her clothes and skin!
		]]></criticalHitText>
	</hitDescriptions>

	<!-- Descriptions that are used when missing an enemy.
		One of the missText values will be randomly selected each time the attacker misses their target.
		Follow the same guidelines as equipText.
		You can use 'npc' as the parsing target for the person who's attacking, and 'npc2' as the parsing target for the person being struck at. -->
	<missDescriptions>
		<missText><![CDATA[
		[npc.name] [npc.verb(fling)] [npc.her] Aphrodisiac Bomb towards [npc2.name], but misjudges her aim. The bomb sails past [npc2.name], shattering harmlessly a good distance behind [npc2.her].
		]]></missText>
	</missDescriptions>
	
	<!-- Descriptions that are used when recovering this weapon (after being used) at the end of each combat tun.
		One of the 'recoveryText' elements will be randomly selected each time a weapon of this type is recovered.
		Follow the same guidelines as equipText.
		You can use 'npc' as the parsing target for the person who's retrieving their one-shot weapon.
		Note that there is no element for end of combat turn recovery, as that simply shows a generic "One-shot weapons recovered: X, Y, Z" description at the end of combat. -->
	<oneShotEndTurnRecoveryDescriptions/>

</weapon>
